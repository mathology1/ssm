<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--配置springMVC.xml 带*的必配-->

    <!--*开启组件扫描
        springMVC负责扫描@Controller-->
    <context:component-scan base-package="ssm.controller"/>


    <!--*开启mvc注解驱动-->
    <mvc:annotation-driven/>


    <!--*开启DefaultServlet处理静态资源-->
    <mvc:default-servlet-handler/>

    <!--上传用的解析器
        作用：将File类型的文件 封装为 MultipartFile类型的文件-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/>

    <!--配置拦截器 三种配置方式-->
    <!--<mvc:interceptors>-->
    <!--    &lt;!&ndash;方式一：&ndash;&gt;-->
    <!--    &lt;!&ndash;<bean class="mvc.interceptor.TestInterceptor"/>&ndash;&gt;-->


    <!--    &lt;!&ndash;方式二：<ref bean="firstInterceptor"></ref>-->
    <!--        还需要给拦截类加上创建对象的注解@Component&ndash;&gt;-->
    <!--    &lt;!&ndash;方式一和方式二都对所有请求映射拦截，不能指定不拦截的映射&ndash;&gt;-->


    <!--    &lt;!&ndash;方式三：<mvc:interceptor>可以指定拦截规则&ndash;&gt;-->
    <!--    <mvc:interceptor>-->
    <!--        &lt;!&ndash;指定需要拦截的请求映射&ndash;&gt;-->
    <!--        &lt;!&ndash;/*表示只拦截上下文路径下的一层目录的请求映射，再往下一层开始都是不会拦截的-->
    <!--            /**表示拦截上下文路径下一层或多层目录的请求映射，即：拦截所有映射&ndash;&gt;-->
    <!--        <mvc:mapping path="/**"/>-->
    <!--        &lt;!&ndash;指定不需要拦截的请求映射&ndash;&gt;-->
    <!--        <mvc:exclude-mapping path="/"/>-->
    <!--        &lt;!&ndash;配置拦截器 前两种方式都可以&ndash;&gt;-->
    <!--        <bean class="mvc.interceptor.TestInterceptor"/>-->
    <!--    </mvc:interceptor>-->
    <!--</mvc:interceptors>-->

    <!-- *配置Thymeleaf视图解析器 -->
    <!--ThymeleafViewResolver用于解析html页面等，jsp页面是另一个类InterResourceViewResolver来解析-->
    <bean id="viewResolver" class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
        <property name="order" value="1"/>
        <property name="characterEncoding" value="UTF-8"/>
        <property name="templateEngine">
            <bean class="org.thymeleaf.spring5.SpringTemplateEngine">
                <property name="templateResolver">
                    <bean class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">

                        <!-- 视图前缀，就是资源保存的路径，可以按需修改 -->
                        <property name="prefix" value="/WEB-INF/templates/"/>

                        <!-- 视图后缀 -->
                        <property name="suffix" value=".html"/>
                        <property name="templateMode" value="HTML5"/>
                        <property name="characterEncoding" value="UTF-8" />
                    </bean>
                </property>
            </bean>
        </property>
    </bean>


    <!--按需配置各种视图解析器-->
    <!--首页-->
    <mvc:view-controller path="/" view-name="add"/>

</beans>